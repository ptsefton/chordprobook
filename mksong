#!/home/pi/working/chordprobook/venv/bin/python
import argparse
import pypandoc
import os
import chordprobook
from chordprobook import books
from chordprobook import instruments as inst

def convert():
    default_output_file = "songbook"
    parser = argparse.ArgumentParser()
    parser.add_argument('files', type=argparse.FileType('r'), nargs="*", default=None, help='List of files')
    parser.add_argument('-a', '--alphabetically', action='store_true', help='Sort songs alphabetically')
    parser.add_argument('-d', '--directory', default='.', help='Directory in which to put the output, relative to the book, setlist or indivudal file. If you want to put files somwhere specific, use a full path starting with "/": defaults to "." ')
    parser.add_argument('-i', '--instrument', default=None, help='Show chord grids for the given instrument. Eg --instrument "Soprano Ukulele"')
    parser.add_argument('--instruments', action='store_true', help='List known instruments and their alises then quit. You use any of the names or aliases listed under AKA with the --instument option')
    parser.add_argument('-l','--left-handed', action='store_true', help='Draw the chords for --instrument (or instruments specified in the document) left-handed, in mirror image')
    parser.add_argument('-k',
                        '--keep-order',
                        action='store_true',
                        help='Preserve song order for playing as a setlist (inserts blank pages to keep multi page songs on facing pages')
    parser.add_argument('--a4', action='store_true', default=True, help='Format for printing (web page output)')
    parser.add_argument('-e', '--epub', action='store_true', help='Output epub book')
    parser.add_argument('-f', '--file-stem', default=default_output_file, help='Base file name, without extension, for output files')
    parser.add_argument( '--html', action='store_true', default=False, help='Output HTML book, defaults to a4 at the moment')
    parser.add_argument('-x', '--docx', action='store_true', help='Output .docx format')
    parser.add_argument('-t', '--odt', action='store_true', help='Output .odt format')

    parser.add_argument('-p', '--pdf', action='store_true', help='Output PDF this is the default')
    parser.add_argument('--reference-docx', default = None, help="Reference docx file to use (eg with Heading 1 having a page-break before)")
    parser.add_argument('--reference-odt', default = None, help="Reference odt file to use (eg with Heading 1 having a page-break before)")
    parser.add_argument('-o','--one-doc', action='store_true', help='Output a single document per song: assumes you want A4 PDF')
    parser.add_argument('-n','--nashville', action='store_true', help='Use Nashville Numbering (actually Roman chord numbers rather than letter-names)')
    parser.add_argument('-m','--major-chart', action='store_true', help='When using (Nashville/Roman) chord numbers, chart minor keys in the relative major')

    parser.add_argument('-b',
                        '--book-file',
                       default=None,
                        help ="""File containing a list of files, each line optionally followed by a transposition {transpose: (+|-)\d\d?}
                                 eg to transpose up one tone:
                                 song-file.cho {transpose: +2}, you can also add a title line: {title: Title of book}""")
    parser.add_argument('-s',
                        '--setlist',
                        default=None,
                        help ="Use a setlist file in markdown format to filter the book, one song per line, and keep facing pages together. Setlist lines can be one or more words from the song title starting with '## ', with '# ' for the names of sets and other markdown as you require in between you can also add a setlist line: {title: Title of setlist}")
    parser.add_argument('--title', default=None, help='Title to use for the book, if there is no title in a book file or setlist file')
    args = vars(parser.parse_args())
    if not(args['html'] or args['odt'] or args['docx'] or args['epub']):
        args['pdf'] = True # Default to PDF if no other options given

    this_path, _ = os.path.split(os.path.realpath(__file__))
    if args['docx'] and not args['reference_docx'] and os.path.exists(os.path.join(this_path, 'data', 'reference.docx')):
         args['reference_docx'] = os.path.join(this_path, 'data', 'reference.docx')
    if args['odt'] and not args['reference_odt'] and os.path.exists(os.path.join(this_path, 'data', 'reference.odt')):
         args['reference_odt'] = os.path.join(this_path, 'data', 'reference.odt')
   
    #Need to be able to pass this into songs now
    instruments = inst.Instruments()

    if args["instruments"]:
        instruments.describe()
        exit()


    out_dir = args["directory"]
    output_file =  args["file_stem"]



    # Do we want chord grids?
    if args["instrument"] != None:
        instrument = instruments.get_instrument_by_name(args['instrument'])
        if instrument != None:
            instrument.load_chord_chart(lefty=True)
            print("Loaded", args['instrument'])
            chart = instrument.chart
            if chart == None:
                print(instrument.error)
        else:
            print("No such instrument on file. Try typing ./mksong --instruments to get a list")

    book = books.cp_song_book(path = args["book_file"] or ".", 
                             keep_order = args['keep_order'] or args['setlist'], 
                             title=args["title"],instruments = instruments,
                             instrument_name=args["instrument"], 
                             nashville=args["nashville"], 
                             major_chart=args["major_chart"],
                             lefty = args["left_handed"])
                           

    if args["book_file"]:
        #base output path on book unless user passed a different name
        book_dir, book_name = os.path.split(args["book_file"])
        output_file = os.path.join(book_dir, out_dir, book_name)
        if not args["files"]:
            print ("Read book file (%s), ignored other files passed" % args["book_file"])

    elif args["files"] != None:
       output_file = os.path.join(out_dir, output_file)
       for f in args['files']:
            book.add_song_from_file(f)


    if args["setlist"]:
         book.order_by_setlist(args["setlist"])
         set_dir, set_name = os.path.split(args["setlist"])
         output_file = os.path.join(set_dir, out_dir, set_name)

    if args["alphabetically"]:
        book.sort_alpha()

    title = args['title']

    #TODO: Make this into separate methods
    # if  args['epub']:
    #     epub_path = output_file + ".epub"
    #     xtra =[ "--toc-depth=1","--epub-chapter-level=1"] #, "--epub-stylesheet=songbook.css"]
    #     pypandoc.convert(book.to_md(), "epub", format="md", outputfile=epub_path, extra_args=xtra)
    #     #subprocess.call(["open", epub_path])

        


    #PDF is generated from HTML, BTW
    if args['one_doc']: #Assume standalone sheets
        book.save_as_single_sheets(out_dir, args)

    elif args['html'] or args['pdf'] or args['docx'] or args['odt'] or args['epub']:
        book.output(args, output_file)

if __name__ == "__main__":
    convert()
